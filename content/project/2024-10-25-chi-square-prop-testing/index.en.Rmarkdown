---
title: Chi-Square prop testing
author: twg
date: '2024-10-25'
slug: chi-square-prop-testing
categories:
  - tidyverse
tags:
  - tidyverse
subtitle: ''
summary: 'Functions to run significance testing across lists and dataframes, then putting the results into a gt table'
authors: []
lastmod: '2024-10-25T11:07:37-07:00'
featured: no
image:
  caption: ''
  focal_point: ''
  preview_only: no
projects: []
---

```{r setup-knitr, include = FALSE}
knitr::opts_chunk$set(
  eval = TRUE, # Default: TRUE
  include = TRUE, # Default: TRUE
  echo = TRUE, # Default: TRUE
  width = getOption("width"),
  fig.align = "center",
  fig.width = 11.5, # Default: 7
  fig.height = 5.75)

pacman::p_load(tidyverse, here, glue, janitor, gt)

# Create individual tibbles for each statement
tibble_trust <- tibble::tibble(
  matched_control_xmedia = c("control", "test"),
  svy_q = c("Brand1", "Brand1"),
  proportion = c(0.339, 0.431),
  n = c(339, 1029),
  total = c(998, 2389)
)

tibble_identify <- tibble::tibble(
  matched_control_xmedia = c("control", "test"),
  svy_q = c("Brand1", "Brand1"),
  proportion = c(0.289, 0.385),
  n = c(288, 919),
  total = c(998, 2389)
)

tibble_like <- tibble::tibble(
  matched_control_xmedia = c("control", "test"),
  svy_q = c("Brand1", "Brand1"),
  proportion = c(0.388, 0.479),
  n = c(387, 1144),
  total = c(998, 2389)
)

tibble_own <- tibble::tibble(
  matched_control_xmedia = c("control", "test"),
  svy_q = c("Brand1", "Brand1"),
  proportion = c(0.395, 0.487),
  n = c(394, 1163),
  total = c(998, 2389)
)

tibble_pay_more <- tibble::tibble(
  matched_control_xmedia = c("control", "test"),
  svy_q = c("Brand1", "Brand1"),
  proportion = c(0.262, 0.383),
  n = c(262, 916),
  total = c(998, 2389)
)

tibble_leading_electric <- tibble::tibble(
  matched_control_xmedia = c("control", "test"),
  svy_q = c("Brand1", "Brand1"),
  proportion = c(0.187, 0.246),
  n = c(186, 588),
  total = c(998, 2389)
)

tibble_leading_digitalization <- tibble::tibble(
  matched_control_xmedia = c("control", "test"),
  svy_q = c("Brand1", "Brand1"),
  proportion = c(0.297, 0.388),
  n = c(296, 926),
  total = c(998, 2389)
)

tibble_leading_sustainability <- tibble::tibble(
  matched_control_xmedia = c("control", "test"),
  svy_q = c("Brand1", "Brand1"),
  proportion = c(0.231, 0.319),
  n = c(230, 763),
  total = c(998, 2389)
)

tibble_relevance <- tibble::tibble(
  matched_control_xmedia = c("control", "test"),
  svy_q = c("Brand1", "Brand1"),
  proportion = c(0.503, 0.564),
  n = c(502, 1347),
  total = c(998, 2389)
)

# Combine all tibbles into a named list
result_list <- list(
  `I fully trust` = tibble_trust,
  `I can fully identify with` = tibble_identify,
  `I really like` = tibble_like,
  `I would like to own` = tibble_own,
  `I would be willing to pay more for than for other premium brands` = tibble_pay_more,
  `Is leading in electric drive` = tibble_leading_electric,
  `Is leading in digitalization (i.e. digital user experience, apps, connectivity, voice assistant, 5G, over)` = tibble_leading_digitalization,
  `Is leading in sustainability efforts (e.g. to recycle and reuse materials to avoid waste)` = tibble_leading_sustainability,
  `Is a brand that will still be relevant in 50 years` = tibble_relevance
)

# function to prop.test list of tidy tibbles
result_prop_test <- function(res) {
  tmpout <- res |> 
    tidyr::pivot_wider(
      names_from = !!rlang::sym(names(res)[1]), 
      values_from = c(proportion, n, total)
    ) |> 
    dplyr::filter(!is.na(proportion_control)) |> 
    dplyr::filter(!is.na(proportion_test)) |> 
    dplyr::rowwise() |> 
    dplyr::mutate(
      prop_test = list(prop.test(c(n_control, n_test), c(total_control, total_test))),
      p_value = prop_test$p.value,  # Extract the p-value
      statistic = prop_test$statistic # Extract the chi-squared statistic
    ) |> 
    dplyr::mutate(lift = round((proportion_test - proportion_control)*100), 
                  sig_level = dplyr::case_when(p_value <= .05 ~ .95,
                                 p_value <= .1 & p_value >.05 ~ .90,
                                 p_value < .2 & p_value > .1 ~ .80)) 
}

# dataframe for second example 
df <- tibble::tibble(
  Category = factor(c(
    "Aided Awareness", "Aided Awareness", "Aided Awareness", "Aided Awareness", "Aided Awareness",
    "Aided Ad Awareness", "Aided Ad Awareness", "Aided Ad Awareness", "Aided Ad Awareness", "Aided Ad Awareness",
    "Purchase Consideration", "Purchase Consideration", "Purchase Consideration", "Purchase Consideration", "Purchase Consideration",
    "Brand Momentum - Top 2 Box", "Brand Momentum - Top 2 Box", "Brand Momentum - Top 2 Box", "Brand Momentum - Top 2 Box", "Brand Momentum - Top 2 Box"
  )),
  svy_q = c(
    "Brand1", "Brand2", "Brand3", "Brand4", "Brand5",
    "Brand1", "Brand2", "Brand3", "Brand4", "Brand5",
    "Brand1", "Brand2", "Brand3", "Brand4", "Brand5",
    "Brand1", "Brand2", "Brand3", "Brand4", "Brand5"
  ),
  proportion = c(
    0.959, 0.931, 0.909, 0.935, 0.936,
    0.450, 0.392, 0.428, 0.408, 0.354,
    0.498, 0.499, 0.518, 0.443, 0.434,
    0.556, 0.579, 0.559, 0.530, 0.594
  ),
  n = c(
    3427, 3329, 3250, 3340, 3345,
    1543, 1306, 1392, 1364, 1185,
    1706, 1662, 1682, 1480, 1452,
    1905, 1926, 1817, 1770, 1987
  ),
  total = rep(3574, 20),
  cat = rep("Brand Metrics", 20)
)

# function to prop.test a dataframe
proptest_dataframe <- function(df, significance_level = 0.1) {
  df <- df %>%
    dplyr::mutate(id = LETTERS[1:n()])  # Assign capital letters as IDs
  
  run_prop_test_significant <- function(i, j, df) {
    prop1 <- df$proportion[i]
    prop2 <- df$proportion[j]
    
    n1 <- df$n[i]
    n2 <- df$n[j]
    
    total1 <- df$total[i]
    total2 <- df$total[j]
    
    counts <- c(n1, n2)
    totals <- c(total1, total2)
    
    test_result <- prop.test(counts, totals)
    
    return(test_result$p.value < significance_level && prop1 > prop2)
  }
  
  df$greater_than <- NA
  
  for (i in 1:nrow(df)) {
    greater_ids <- c()
    for (j in 1:nrow(df)) {
      if (i != j && run_prop_test_significant(i, j, df)) {
        greater_ids <- c(greater_ids, df$id[j])
      }
    }
    df$greater_than[i] <- paste(greater_ids, collapse = ", ")
  }
  return(df)
}

```

{{% toc %}}

I've played with running the `prop.test()` chi-square tests across tibbles and I think I've finally got an efficient way of doing it. 

## Simple prop testing

First, let's look at a simple example. I have survey data from a control/exposed lift study and I want to see if the lift for each question is significant. The results are in a named list with a series of tidy tibbles. 

```{r}
result_list[1:3]
```

Structured like this, I can easily just use `pivot_wider()` to spread the data and then run the `prop.test()` function. I'll write a function to do that  . 

```{r, eval = FALSE }
result_prop_test <- function(res) {
  tmpout <- res |> 
    tidyr::pivot_wider(
      names_from = !!rlang::sym(names(res)[1]), 
      values_from = c(proportion, n, total)
    ) |> 
    dplyr::filter(!is.na(proportion_control)) |> 
    dplyr::filter(!is.na(proportion_test)) |> 
    dplyr::rowwise() |> 
    dplyr::mutate(
      prop_test = list(prop.test(c(n_control, n_test), c(total_control, total_test))),
      p_value = prop_test$p.value,  # Extract the p-value
      statistic = prop_test$statistic # Extract the chi-squared statistic
    ) |> 
    dplyr::mutate(lift = round((proportion_test - proportion_control)*100), 
                  sig_level = dplyr::case_when(p_value <= .05 ~ .95,
                                 p_value <= .1 & p_value >.05 ~ .90,
                                 p_value < .2 & p_value > .1 ~ .80)) 
  return(tmpout)
}
```

Now if we take a single tibble from our list and run it through our function, we can see that the results are now in one line and the p_value and statistic of the prop.test are in their own separate columns. The full results of the prop.test are also in a list column. 

```{r}
res1 <- result_prop_test(result_list[[1]])
res1
```

I can also just run the entire list through the function. It returns the same list format, but I can use `data.table::rbindlist()` to put into a tibble. 

```{r}
sig_results <- purrr::map(result_list, result_prop_test)

data.table::rbindlist(sig_results, idcol = "question") |> 
  as_tibble() |> 
  select(question, svy_q, contains("proportion"), lift, sig_level)
```

## Prop testing across all options

Now for something a little more involved. In the same survey that gave us the control/exposed, we also have questions asked for the entire competitive set. The data is currently in a tidy frame that looks like this: 

```{r}
head(df, 10)
```

I want to compare the results for each Category question for each brand against all others. So the function below will do that for me. It also gives each brand an id and those id's are then used to determine which brands have significantly greater results compared to the rest.  

```{r}
proptest_dataframe <- function(df, significance_level = 0.1) {
  df <- df %>%
    dplyr::mutate(id = LETTERS[1:n()])  # Assign capital letters as IDs
  
  run_prop_test_significant <- function(i, j, df) {
    prop1 <- df$proportion[i]
    prop2 <- df$proportion[j]
    
    n1 <- df$n[i]
    n2 <- df$n[j]
    
    total1 <- df$total[i]
    total2 <- df$total[j]
    
    counts <- c(n1, n2)
    totals <- c(total1, total2)
    
    test_result <- prop.test(counts, totals)
    
    return(test_result$p.value < significance_level && prop1 > prop2)
  }
  
  df$greater_than <- NA
  
  for (i in 1:nrow(df)) {
    greater_ids <- c()
    for (j in 1:nrow(df)) {
      if (i != j && run_prop_test_significant(i, j, df)) {
        greater_ids <- c(greater_ids, df$id[j])
      }
    }
    df$greater_than[i] <- paste(greater_ids, collapse = ", ")
  }
  return(df)
}

proptest_dataframe(df[1:5,])
```

So this works, but because my dataframe has multiple questions included, I can't just pass the whole thing in. Every row will be treated as if it's all part of one, big prop.test. 

To fix this, I'm going to split my data by the Category question and then I'm going to run it through this function. 

```{r}
df_list <- split(df, df$Category)

results <- df_list |> 
    purrr::map(proptest_dataframe)

results
```

Again, everything works as it should. But I also want to present these results to someone, and right now, the results are in a list of tidy tibbles. I'm going to add to my current `proptest_dataframe()` function to widen the data and also to do the prep work necessary to put these results into a [gt](https://gt.rstudio.com/index.html) table. 

```{r}
proptest_dataframe <- function(df, significance_level = 0.1) {
  df <- df %>%
    dplyr::mutate(id = LETTERS[1:n()])  # Assign capital letters as IDs
  
  run_prop_test_significant <- function(i, j, df) {
    prop1 <- df$proportion[i]
    prop2 <- df$proportion[j]
    
    n1 <- df$n[i]
    n2 <- df$n[j]
    
    total1 <- df$total[i]
    total2 <- df$total[j]
    
    counts <- c(n1, n2)
    totals <- c(total1, total2)
    
    test_result <- prop.test(counts, totals)
    
    return(test_result$p.value < significance_level && prop1 > prop2)
  }
  
  df$greater_than <- NA
  
  for (i in 1:nrow(df)) {
    greater_ids <- c()
    for (j in 1:nrow(df)) {
      if (i != j && run_prop_test_significant(i, j, df)) {
        greater_ids <- c(greater_ids, df$id[j])
      }
    }
    df$greater_than[i] <- paste(greater_ids, collapse = ", ")
  }
  
  # here i'm going to subscript my `greater_than` to show significance
  df <- df |> 
    mutate(
      brand_id = glue("{svy_q} {id}"),  
      proportion_with_sub = ifelse(
        greater_than != "", 
        glue("{round(proportion * 100)}% <sub>({greater_than})</sub>"),  
        glue("{round(proportion * 100)}%")
      )
    )
  
  # widen the data
  df_wide <- df |> 
    dplyr::select(Category, cat, brand_id, proportion_with_sub) |> 
    tidyr::pivot_wider(
      names_from = brand_id, 
      values_from = proportion_with_sub,
      values_fn = list(proportion_with_sub = function(x) paste(x, collapse = ""))
    )
  
  return(df_wide)
}

df_list <- split(df, df$Category)

results <- df_list |> 
    purrr::map(proptest_dataframe)

results
```

Note that the column names have a capital letter next to them; that way each brand is readily identifiable for the reader of the table. Now we're going to bind our data into a single tibble, and then we're going to pass it to gt to make a table. 

```{r, eval = FALSE}
combined_result <- results |> 
    data.table::rbindlist(fill = TRUE) |> 
    tibble::as_tibble() |> 
    dplyr::mutate(Category = as.character(Category))

library(gt)
  
  # Programmatically generate the labels for the columns (with <br>)
  col_labels <- combined_result |> 
    colnames() |> 
    set_names() |>   # Keeps the original column names as-is
    map(~ html(glue("{gsub(' ', '<br>', .)}")))  # Programmatically replace space with <br> in labels
  
  # Create the gt table with programmatically generated column labels and subscripting
  combined_result |> 
    group_by(cat) |> 
    gt() |> 
    tab_header(
      title = "Competitive summary",
      ) |> 
    cols_label(.list = col_labels) |> 
    fmt_markdown(columns = everything()) |> 
    # bolding groups and columns 
    tab_style(
      style = cell_text(weight = 'bold',
                        size = px(13)),
      locations = list(
        cells_column_labels(
          columns = everything()),
        cells_row_groups(groups = TRUE))
    ) |> 
    gt::tab_footnote(
      footnote = "A footnote goes here to explain the table",
      locations = gt::cells_title(groups = "title")
    ) |> 
    # aligning the title left
    gt::tab_style(
      style = gt::cell_text(align = 'left',
                            weight = 'bold',
                            size = gt::px(16)),
      locations = gt::cells_title(c("title"))
    ) |> 
    # aligning the subtitle left
    gt::tab_style(
      style = gt::cell_text(align = 'left',
                            weight = 'bold',
                            size = gt::px(14)),
      locations = gt::cells_title(c("subtitle")) 
    ) |> 
    # centering column labels (not first column)
    gt::tab_style(
      style = gt::cell_text(align = 'center'),
      locations = gt::cells_column_labels(
        columns = -1  # Exclude the first column
      )
    ) |>
    # font size in table
    gt::tab_style(
      style = gt::cell_text(size = px(12)),
      locations = cells_body(
        columns = dplyr::everything())
    ) |> 
    # centering all variables in table (not first column)
    gt::tab_style(
      style = gt::cell_text(align = "center"),
      locations = gt::cells_body(columns = -1)
    ) |> 
    # don't have Category column labeled
    cols_label(
      Category = ""
    ) |> 
    # final options
    gt::tab_options(
      data_row.padding = gt::px(4),
      row_group.padding = gt::px(4),
      source_notes.font.size = gt::px(10),
      footnotes.font.size = gt::px(10),
      footnotes.marks = "" # empty footnote mark
    ) 
```

```{r, echo = FALSE}
proptest_dataframe <- function(df, significance_level = 0.1) {
  df <- df %>%
    dplyr::mutate(id = LETTERS[1:n()])  # Assign capital letters as IDs
  
  run_prop_test_significant <- function(i, j, df) {
    prop1 <- df$proportion[i]
    prop2 <- df$proportion[j]
    
    n1 <- df$n[i]
    n2 <- df$n[j]
    
    total1 <- df$total[i]
    total2 <- df$total[j]
    
    counts <- c(n1, n2)
    totals <- c(total1, total2)
    
    test_result <- prop.test(counts, totals)
    
    return(test_result$p.value < significance_level && prop1 > prop2)
  }
  
  df$greater_than <- NA
  
  for (i in 1:nrow(df)) {
    greater_ids <- c()
    for (j in 1:nrow(df)) {
      if (i != j && run_prop_test_significant(i, j, df)) {
        greater_ids <- c(greater_ids, df$id[j])
      }
    }
    df$greater_than[i] <- paste(greater_ids, collapse = ", ")
  }
  
  # here i'm going to subscript my `greater_than` to show significance
  df <- df |> 
    mutate(
      brand_id = glue("{svy_q} {id}"),  
      proportion_with_sub = ifelse(
        greater_than != "", 
        glue("{round(proportion * 100)}% <sub>({greater_than})</sub>"),  
        glue("{round(proportion * 100)}%")
      )
    )
  
  # widen the data
  df_wide <- df |> 
    dplyr::select(Category, cat, brand_id, proportion_with_sub) |> 
    tidyr::pivot_wider(
      names_from = brand_id, 
      values_from = proportion_with_sub,
      values_fn = list(proportion_with_sub = function(x) paste(x, collapse = ""))
    )
  
  return(df_wide)
}

df_list <- split(df, df$Category)

results <- df_list |> 
    purrr::map(proptest_dataframe)

combined_result <- results |> 
    data.table::rbindlist(fill = TRUE) |> 
    tibble::as_tibble() |> 
    dplyr::mutate(Category = as.character(Category))

# table 
# Programmatically generate the labels for the columns (with <br>)
  col_labels <- combined_result |> 
    colnames() |> 
    set_names() |>   # Keeps the original column names as-is
    map(~ html(glue("{gsub(' ', '<br>', .)}")))  # Programmatically replace space with <br> in labels
  
  # Create the gt table with programmatically generated column labels and subscripting
  combined_result |> 
    group_by(cat) |> 
    gt() |> 
    tab_header(
      title = "Competitive summary",
      ) |> 
    cols_label(.list = col_labels) |> 
    fmt_markdown(columns = everything()) |> 
    # bolding groups and columns 
    tab_style(
      style = cell_text(weight = 'bold',
                        size = px(13)),
      locations = list(
        cells_column_labels(
          columns = everything()),
        cells_row_groups(groups = TRUE))
    ) |> 
    gt::tab_footnote(
      footnote = "A footnote goes here to explain the table",
      locations = gt::cells_title(groups = "title")
    ) |> 
    # aligning the title left
    gt::tab_style(
      style = gt::cell_text(align = 'left',
                            weight = 'bold',
                            size = gt::px(16)),
      locations = gt::cells_title(c("title"))
    ) |> 
    # aligning the subtitle left
    gt::tab_style(
      style = gt::cell_text(align = 'left',
                            weight = 'bold',
                            size = gt::px(14)),
      locations = gt::cells_title(c("subtitle")) 
    ) |> 
    # centering column labels (not first column)
    gt::tab_style(
      style = gt::cell_text(align = 'center'),
      locations = gt::cells_column_labels(
        columns = -1  # Exclude the first column
      )
    ) |>
    # font size in table
    gt::tab_style(
      style = gt::cell_text(size = px(12)),
      locations = cells_body(
        columns = dplyr::everything())
    ) |> 
    # centering all variables in table (not first column)
    gt::tab_style(
      style = gt::cell_text(align = "center"),
      locations = gt::cells_body(columns = -1)
    ) |> 
    # don't have Category column labeled
    cols_label(
      Category = ""
    ) |> 
    # final options
    gt::tab_options(
      data_row.padding = gt::px(4),
      row_group.padding = gt::px(4),
      source_notes.font.size = gt::px(10),
      footnotes.font.size = gt::px(10),
      footnotes.marks = "" # empty footnote mark
    ) 
```

